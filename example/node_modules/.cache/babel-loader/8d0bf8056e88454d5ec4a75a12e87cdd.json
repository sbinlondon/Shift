{"ast":null,"code":"import axios from 'axios';\n\nfunction useBackend(baseURL) {\n  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n  // Configure Axios\n  var api = axios.create({\n    baseURL: baseURL,\n    timeout: timeout\n  }); // Helper method for Authorization header\n\n  var auth = function auth(token) {\n    return {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    };\n  };\n\n  var backend = {}; // Oauth\n\n  backend.initOauth = function (data) {\n    return api.post('/oauth/init', data);\n  }; // Init Oauth (to get state)\n\n\n  backend.providerLogin = function (data) {\n    return api.post('/oauth/login', data);\n  }; // Finalize Oauth login\n  // Signup flow\n\n\n  backend.signup = function (email, password, language) {\n    return api.post('/signup', {\n      email: email,\n      password: password,\n      language: language\n    });\n  }; // Signup\n\n\n  backend.confirm = function (confirmId) {\n    return api.post('/account', {\n      id: confirmId\n    });\n  }; // Confirm\n\n\n  backend.createAccount = function (confirmId, consent) {\n    return api.post('/account', {\n      id: confirmId,\n      consent: consent\n    });\n  }; // Create account\n\n\n  backend.resendActivationEmail = function (email, language) {\n    return api.post('/resend', {\n      email: email,\n      language: language\n    });\n  }; // Re-send activation email\n  // Other non-authenticated calls\n\n\n  backend.login = function (username, password) {\n    return api.post('/login', {\n      username: username,\n      password: password\n    });\n  }; // Login\n\n\n  backend.confirmationLogin = function (id) {\n    return api.post('/confirm/login', {\n      id: id\n    });\n  }; // Confirmation-based login\n\n\n  backend.recoverAccount = function (username) {\n    return api.post('/account/recover', {\n      username: username\n    });\n  }; // Ask for a password reset\n\n\n  backend.loadPattern = function (handle) {\n    return api.get('/pattern/' + handle);\n  }; // Load pattern anonymously\n\n\n  backend.loadPatrons = function (handle) {\n    return api.get('/patrons');\n  }; // Load patron list\n\n\n  backend.newsletterSubscribe = function (email) {\n    return api.post('/newsletter/subscribe', {\n      email: email\n    });\n  }; // Subscribe email to newsletter\n\n\n  backend.newsletterUnsubscribe = function (email) {\n    return api.post('/newsletter/unsubscribe', {\n      email: email\n    });\n  }; // Unsubscribe email from newsletter\n  // Users\n\n\n  backend.profile = function (username, token) {\n    return api.get('/users/' + username, auth(token));\n  }; // Load user profile\n\n\n  backend.account = function (token) {\n    return api.get('/account', auth(token));\n  }; // Try to authenticate based on stored token\n\n\n  backend.export = function (token) {\n    return api.get('/account/export', auth(token));\n  }; // Export data\n\n\n  backend.restrict = function (token) {\n    return api.get('/account/restrict', auth(token));\n  }; // Restrict data processing (freeze account)\n\n\n  backend.remove = function (token) {\n    return api.delete('/account', auth(token));\n  }; // Remove account\n\n\n  backend.saveAccount = function (data, token) {\n    return api.put('/account', data, auth(token));\n  }; // Update account\n\n\n  backend.availableUsername = function (data, token) {\n    return api.post('/available/username', data, auth(token));\n  }; // Check is a username is available\n\n\n  backend.setPassword = function (data, token) {\n    return api.post('/set/password', data, auth(token));\n  }; // (re)set a new password\n  // People\n\n\n  backend.createPerson = function (data, token) {\n    return api.post('/people', data, auth(token));\n  }; // Create person\n\n\n  backend.savePerson = function (handle, data, token) {\n    return api.put('/people/' + handle, data, auth(token));\n  }; // Update person\n\n\n  backend.removePerson = function (handle, token) {\n    return api.delete('/people/' + handle, auth(token));\n  }; // Remove person\n  // Patterns\n\n\n  backend.loadPattern = function (handle, token) {\n    return api.get('/patterns/' + handle, auth(token));\n  }; // Load pattern\n\n\n  backend.createPattern = function (data, token) {\n    return api.post('/patterns', data, auth(token));\n  }; // Create pattern\n\n\n  backend.removePattern = function (handle, token) {\n    return api.delete('/patterns/' + handle, auth(token));\n  }; // Remove pattern\n\n\n  backend.savePattern = function (handle, data, token) {\n    return api.put('/patterns/' + handle, data, auth(token));\n  }; // Update pattern\n  // Github\n\n\n  backend.createGist = function (data) {\n    return api.post('/github/gist', data);\n  }; // Export pattern as Github gist\n\n\n  backend.createIssue = function (data) {\n    return api.post('/github/issue', data);\n  }; // Create Github issue\n  // Admin\n\n\n  backend.adminSearch = function (query, token) {\n    return api.post('/admin/search', {\n      query: query\n    }, auth(token));\n  }; // Search users as admin\n\n\n  backend.adminSetPatronStatus = function (data, token) {\n    return api.put('/admin/patron', data, auth(token));\n  }; // Set patron status for a user\n\n\n  backend.adminSetRole = function (data, token) {\n    return api.put('/admin/role', data, auth(token));\n  }; // Set role for a user\n\n\n  backend.adminUnfreeze = function (data, token) {\n    return api.put('/admin/unfreeze', data, auth(token));\n  }; // Unfreeze a user account\n\n\n  backend.adminImpersonate = function (data, token) {\n    return api.post('/admin/impersonate', data, auth(token));\n  }; // Impersonate a user\n\n\n  backend.adminPatronList = function (token) {\n    return api.get('/admin/patrons', auth(token));\n  }; // Get patron list\n\n\n  backend.adminSubscriberList = function (token) {\n    return api.get('/admin/subscribers', auth(token));\n  }; // Get patron list\n\n\n  backend.adminStats = function (token) {\n    return api.get('/admin/stats', auth(token));\n  }; // Get stats\n\n\n  return backend;\n}\n\nexport default useBackend;","map":{"version":3,"sources":["../src/backend/index.js"],"names":["timeout","api","baseURL","auth","token","headers","Authorization","backend","data","email","password","language","confirmId","id","consent","username","handle","query"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nfunction useBackend(baseURL, timeout = 10000) {\n  // Configure Axios\n  const api = axios.create({ baseURL, timeout })\n\n  // Helper method for Authorization header\n  const auth = (token) => ({\n    headers: { Authorization: 'Bearer ' + token }\n  })\n\n  const backend = {}\n\n  // Oauth\n  backend.initOauth = (data) => api.post('/oauth/init', data) // Init Oauth (to get state)\n  backend.providerLogin = (data) => api.post('/oauth/login', data) // Finalize Oauth login\n\n  // Signup flow\n  backend.signup = (email, password, language) => api.post('/signup', { email, password, language }) // Signup\n  backend.confirm = (confirmId) => api.post('/account', { id: confirmId }) // Confirm\n  backend.createAccount = (confirmId, consent) => api.post('/account', { id: confirmId, consent }) // Create account\n  backend.resendActivationEmail = (email, language) => api.post('/resend', { email, language }) // Re-send activation email\n\n  // Other non-authenticated calls\n  backend.login = (username, password) => api.post('/login', { username, password }) // Login\n  backend.confirmationLogin = (id) => api.post('/confirm/login', { id }) // Confirmation-based login\n  backend.recoverAccount = (username) => api.post('/account/recover', { username: username }) // Ask for a password reset\n  backend.loadPattern = (handle) => api.get('/pattern/' + handle) // Load pattern anonymously\n  backend.loadPatrons = (handle) => api.get('/patrons') // Load patron list\n  backend.newsletterSubscribe = (email) => api.post('/newsletter/subscribe', { email }) // Subscribe email to newsletter\n  backend.newsletterUnsubscribe = (email) => api.post('/newsletter/unsubscribe', { email }) // Unsubscribe email from newsletter\n  // Users\n  backend.profile = (username, token) => api.get('/users/' + username, auth(token)) // Load user profile\n  backend.account = (token) => api.get('/account', auth(token)) // Try to authenticate based on stored token\n  backend.export = (token) => api.get('/account/export', auth(token)) // Export data\n  backend.restrict = (token) => api.get('/account/restrict', auth(token)) // Restrict data processing (freeze account)\n  backend.remove = (token) => api.delete('/account', auth(token)) // Remove account\n  backend.saveAccount = (data, token) => api.put('/account', data, auth(token)) // Update account\n  backend.availableUsername = (data, token) => api.post('/available/username', data, auth(token)) // Check is a username is available\n  backend.setPassword = (data, token) => api.post('/set/password', data, auth(token)) // (re)set a new password\n\n  // People\n  backend.createPerson = (data, token) => api.post('/people', data, auth(token)) // Create person\n  backend.savePerson = (handle, data, token) => api.put('/people/' + handle, data, auth(token)) // Update person\n  backend.removePerson = (handle, token) => api.delete('/people/' + handle, auth(token)) // Remove person\n\n  // Patterns\n  backend.loadPattern = (handle, token) => api.get('/patterns/' + handle, auth(token)) // Load pattern\n  backend.createPattern = (data, token) => api.post('/patterns', data, auth(token)) // Create pattern\n  backend.removePattern = (handle, token) => api.delete('/patterns/' + handle, auth(token)) // Remove pattern\n  backend.savePattern = (handle, data, token) => api.put('/patterns/' + handle, data, auth(token)) // Update pattern\n\n  // Github\n  backend.createGist = (data) => api.post('/github/gist', data) // Export pattern as Github gist\n  backend.createIssue = (data) => api.post('/github/issue', data) // Create Github issue\n\n  // Admin\n  backend.adminSearch = (query, token) => api.post('/admin/search', { query }, auth(token)) // Search users as admin\n  backend.adminSetPatronStatus = (data, token) => api.put('/admin/patron', data, auth(token)) // Set patron status for a user\n  backend.adminSetRole = (data, token) => api.put('/admin/role', data, auth(token)) // Set role for a user\n  backend.adminUnfreeze = (data, token) => api.put('/admin/unfreeze', data, auth(token)) // Unfreeze a user account\n  backend.adminImpersonate = (data, token) => api.post('/admin/impersonate', data, auth(token)) // Impersonate a user\n  backend.adminPatronList = (token) => api.get('/admin/patrons', auth(token)) // Get patron list\n  backend.adminSubscriberList = (token) => api.get('/admin/subscribers', auth(token)) // Get patron list\n  backend.adminStats = (token) => api.get('/admin/stats', auth(token)) // Get stats\n\n  return backend\n}\n\nexport default useBackend\n"]},"metadata":{},"sourceType":"module"}