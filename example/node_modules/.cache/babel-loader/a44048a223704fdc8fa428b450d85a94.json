{"ast":null,"code":"var roundMm = function roundMm(val, units) {\n  if (units === \"imperial\") return Math.round(val * 1000000) / 1000000;else return Math.round(val * 10) / 10;\n};\n\nvar formatImperial = function formatImperial(neg, inch) {\n  var numo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var deno = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var format = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'html';\n\n  if (format === 'html') {\n    if (numo) return \"<span>\".concat(neg).concat(inch, \"&nbsp;<sup>\").concat(numo, \"</sup>/<sub>\").concat(deno, \"</sub></span>\");else return \"<span>\".concat(neg).concat(inch, \"</span>\");\n  } else {\n    if (numo) return \"\".concat(neg).concat(inch, \" \").concat(numo, \"/\").concat(deno);else return \"\".concat(neg).concat(inch);\n  }\n};\n\nvar formatMm = function formatMm(val, units) {\n  var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'html';\n  val = roundMm(val);\n\n  if (units === 'imperial') {\n    if (val == 0) return formatImperial('', 0, false, false, format);\n    var negative = '';\n    var inches = '';\n    var rest = '';\n    var fraction = val / 25.4;\n\n    if (fraction < 0) {\n      fraction = fraction * -1;\n      negative = '-';\n    }\n\n    if (Math.abs(fraction) < 1) rest = fraction;else {\n      inches = Math.floor(fraction);\n      rest = fraction - inches;\n    }\n    var suffix = '';\n    if (format === 'html') suffix = '\"';\n    var fraction128 = Math.round(rest * 128);\n    if (fraction128 == 0) return formatImperial(negative, inches, false, false, format);\n    if (fraction128 % 64 == 0) return formatImperial(negative, inches, fraction128 / 64, 2, format) + suffix;\n    if (fraction128 % 32 == 0) return formatImperial(negative, inches, fraction128 / 32, 4, format) + suffix;\n    if (fraction128 % 16 == 0) return formatImperial(negative, inches, fraction128 / 16, 8, format) + suffix;\n    if (fraction128 % 8 == 0) return formatImperial(negative, inches, fraction128 / 8, 16, format) + suffix;\n    if (fraction128 % 4 == 0) return formatImperial(negative, inches, fraction128 / 4, 32, format) + suffix;\n    if (fraction128 % 2 == 0) return formatImperial(negative, inches, fraction128 / 2, 64, format) + suffix;\n    return negative + Math.round(fraction * 100) / 100 + suffix;\n  } else {\n    if (format === 'html') return roundMm(val / 10) + 'cm';else return roundMm(val / 10);\n  }\n};\n\nexport default formatMm;","map":{"version":3,"sources":["../src/roundMm/index.js","../src/formatImperial/index.js","../src/formatMm/index.js"],"names":["roundMm","units","Math","val","formatImperial","numo","deno","format","neg","inch","formatMm","negative","inches","rest","fraction","suffix","fraction128"],"mappings":"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","sourcesContent":["const roundMm = (val, units) => {\n  if (units === \"imperial\") return Math.round(val * 1000000) / 1000000;\n  else return Math.round(val * 10) / 10;\n};\n\nexport default roundMm;\n","const formatImperial = (neg, inch, numo = false, deno = false, format = 'html') => {\n  if (format === 'html') {\n    if (numo) return `<span>${neg}${inch}&nbsp;<sup>${numo}</sup>/<sub>${deno}</sub></span>`\n    else return `<span>${neg}${inch}</span>`\n  } else {\n    if (numo) return `${neg}${inch} ${numo}/${deno}`\n    else return `${neg}${inch}`\n  }\n}\n\nexport default formatImperial\n","import roundMm from '../roundMm'\nimport formatImperial from '../formatImperial'\n\nconst formatMm = (val, units, format = 'html') => {\n  val = roundMm(val)\n  if (units === 'imperial') {\n    if (val == 0) return formatImperial('', 0, false, false, format)\n    let negative = ''\n    let inches = ''\n    let rest = ''\n    let fraction = val / 25.4\n    if (fraction < 0) {\n      fraction = fraction * -1\n      negative = '-'\n    }\n    if (Math.abs(fraction) < 1) rest = fraction\n    else {\n      inches = Math.floor(fraction)\n      rest = fraction - inches\n    }\n    let suffix = ''\n    if (format === 'html') suffix = '\"'\n    let fraction128 = Math.round(rest * 128)\n    if (fraction128 == 0) return formatImperial(negative, inches, false, false, format)\n    if (fraction128 % 64 == 0)\n      return formatImperial(negative, inches, fraction128 / 64, 2, format) + suffix\n    if (fraction128 % 32 == 0)\n      return formatImperial(negative, inches, fraction128 / 32, 4, format) + suffix\n    if (fraction128 % 16 == 0)\n      return formatImperial(negative, inches, fraction128 / 16, 8, format) + suffix\n    if (fraction128 % 8 == 0)\n      return formatImperial(negative, inches, fraction128 / 8, 16, format) + suffix\n    if (fraction128 % 4 == 0)\n      return formatImperial(negative, inches, fraction128 / 4, 32, format) + suffix\n    if (fraction128 % 2 == 0)\n      return formatImperial(negative, inches, fraction128 / 2, 64, format) + suffix\n\n    return negative + Math.round(fraction * 100) / 100 + suffix\n  } else {\n    if (format === 'html') return roundMm(val / 10) + 'cm'\n    else return roundMm(val / 10)\n  }\n}\n\nexport default formatMm\n"]},"metadata":{},"sourceType":"module"}