{"ast":null,"code":"// The completes the list of measurements with the ones\n// we can calculate based on what we already have\nfunction complete(m) {\n  // Added by plugin-bust:\n  m.bust = m.chest; // Added by plugin-measurements:\n\n  m.crossSeamBack = m.crossSeam - m.crossSeamFront;\n  m.seatBackArc = m.seatBack / 2;\n  m.waistBackArc = m.waistBack / 2;\n  if (m.bust && m.bustFront) m.bustBack = m.bust - m.bustFront;\n  m.seatFront = m.seat - m.seatBack;\n  m.seatFrontArc = m.seatFront / 2;\n  m.waistFront = m.waist - m.waistBack;\n  m.waistFrontArc = m.waistFront / 2;\n  if (m.hightBust && m.highBustFront) m.highBustBack = m.highBust - m.highBustFront;\n  return m;\n}\n/*\n * These are a set of measurements of an average-sized woman.\n * We simply extrapolate for other sizes (based on neck)\n * by keeping the same proportions.\n * That is almost certainly not the best sizing table you can get,\n * but we are not in the business of standard sizes, so this will do.\n */\n\n\nvar withBreasts = complete({\n  ankle: 245,\n  biceps: 270,\n  bustFront: 480,\n  bustSpan: 160,\n  chest: 925,\n  crossSeam: 740,\n  crossSeamFront: 370,\n  crotchDepth: 270,\n  heel: 315,\n  head: 565,\n  highBust: 865,\n  highBustFront: 440,\n  hips: 900,\n  hpsToBust: 275,\n  hpsToWaistBack: 395,\n  hpsToWaistFront: 400,\n  inseam: 765,\n  knee: 380,\n  neck: 340,\n  seat: 1010,\n  seatBack: 520,\n  shoulderSlope: 13,\n  shoulderToElbow: 340,\n  shoulderToShoulder: 415,\n  shoulderToWrist: 590,\n  underbust: 780,\n  upperLeg: 570,\n  waist: 750,\n  waistBack: 380,\n  waistToFloor: 1050,\n  waistToHips: 125,\n  waistToKnee: 600,\n  waistToSeat: 250,\n  waistToUnderbust: 80,\n  waistToUpperLeg: 285,\n  wrist: 165\n});\n/*\n * These are a set of measurements of an average-sized man.\n * We simply extrapolate for other sizes (based on neck)\n * by keeping the same proportions.\n * That is almost certainly not the best sizing table you can get,\n * but we are not in the business of standard sizes, so this will do.\n */\n\nvar withoutBreasts = complete({\n  ankle: 235,\n  biceps: 350,\n  chest: 1000,\n  crossSeam: 870,\n  crossSeamFront: 410,\n  crotchDepth: 340,\n  heel: 360,\n  head: 590,\n  hips: 840,\n  hpsToBust: 280,\n  hpsToWaistBack: 470,\n  inseam: 780,\n  knee: 410,\n  neck: 380,\n  seat: 1020,\n  seatBack: 560,\n  shoulderSlope: 13,\n  shoulderToElbow: 360,\n  shoulderToShoulder: 450,\n  shoulderToWrist: 630,\n  upperLeg: 625,\n  waist: 810,\n  waistBack: 410,\n  waistToFloor: 1160,\n  waistToHips: 130,\n  waistToKnee: 640,\n  waistToSeat: 270,\n  waistToUpperLeg: 340,\n  wrist: 175\n});\n/*\n * Since linear measurements don't scale the same as circumference\n * measurements, we apply a correction ratio.\n */\n\nvar a = 0.5; // arc\n\nvar c = 1; // circumference\n\nvar v = 0.65; // vertical\n\nvar ratio = {\n  // Arc measurements\n  bustFront: a,\n  bustSpan: a,\n  highBustFront: a,\n  // Circumference measurements\n  ankle: c,\n  biceps: c,\n  chest: c,\n  highBust: c,\n  hips: c,\n  neck: c,\n  underbust: c,\n  // Vertical measurements\n  crotchDepth: v,\n  hpsToBust: v,\n  hpsToWaistBack: v,\n  hpsToWaistFront: v,\n  waistToHips: v,\n  waistToKnee: v,\n  waistToSeat: v,\n  waistToUnderbust: v,\n  waistToUpperLeg: v,\n  // Other\n  seatBack: 0.6,\n  waistBack: 0.85,\n  crossSeam: 0.6,\n  crossSeamFront: 0.3,\n  head: 0.35,\n  heel: 0.25,\n  inseam: 0.25,\n  knee: 0.65,\n  seat: 0.6,\n  shoulderToElbow: 0.5,\n  shoulderToShoulder: 0.65,\n  shoulderToWrist: 0.3,\n  upperLeg: 0.45,\n  waist: 0.85,\n  waistToFloor: 0.4,\n  wrist: 0.5\n};\n\nvar neckstimate = function neckstimate() {\n  var neck = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var measurement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var breasts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var noRound = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var data = breasts ? withBreasts : withoutBreasts; // Shoulder slope is in degrees now. Always return de default.\n\n  if (measurement === 'shoulderSlope') return withBreasts.shoulderSlope;\n  if (!neck) throw new Error('neckstimate() requires a neck measurement in mm as first parameter');\n\n  if (!measurement) {\n    // No measurement passed\n    throw new Error('new neckstimate() requires a valid measurement name as second parameter. (received ' + JSON.stringify(measurement) + ')');\n  }\n\n  if (typeof data[measurement] === 'undefined') {\n    if (typeof withBreasts[measurement] === 'undefined') {\n      // We used to throw this error, but let's just return null instead so things don't go off the rails\n      console.log(new Error(\"neckstimate() called with an invalid measurement name (\".concat(measurement, \")\")));\n      return null;\n    } else {\n      console.log(\"WARNING: neckstimate() called for a breasts-only measurement (\".concat(measurement, \") on a no-breasts person\")); // Return something anyway, rather than fall over\n\n      data = withBreasts;\n    }\n  } // This is what should happen\n\n\n  var delta = neck / data.neck * data[measurement] - data[measurement];\n  return noRound ? data[measurement] + delta * ratio[measurement] : Math.round(data[measurement] + delta * ratio[measurement]);\n};\n\nexport default neckstimate;","map":{"version":3,"sources":["../src/neckstimate/complete.js","../src/neckstimate/with-breasts.js","../src/neckstimate/without-breasts.js","../src/neckstimate/ratio.js","../src/neckstimate/index.js"],"names":["m","complete","ankle","biceps","bustFront","bustSpan","chest","crossSeam","crossSeamFront","crotchDepth","heel","head","highBust","highBustFront","hips","hpsToBust","hpsToWaistBack","hpsToWaistFront","inseam","knee","neck","seat","seatBack","shoulderSlope","shoulderToElbow","shoulderToShoulder","shoulderToWrist","underbust","upperLeg","waist","waistBack","waistToFloor","waistToHips","waistToKnee","waistToSeat","waistToUnderbust","waistToUpperLeg","wrist","a","c","v","neckstimate","measurement","breasts","noRound","data","withBreasts","JSON","console","delta","ratio","Math"],"mappings":"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","sourcesContent":["// The completes the list of measurements with the ones\n// we can calculate based on what we already have\nexport default function complete(m) {\n  // Added by plugin-bust:\n  m.bust = m.chest\n\n  // Added by plugin-measurements:\n  m.crossSeamBack = m.crossSeam - m.crossSeamFront\n  m.seatBackArc = m.seatBack / 2\n  m.waistBackArc = m.waistBack / 2\n  if (m.bust && m.bustFront) m.bustBack = m.bust - m.bustFront\n  m.seatFront = m.seat - m.seatBack\n  m.seatFrontArc = m.seatFront / 2\n  m.waistFront = m.waist - m.waistBack\n  m.waistFrontArc = m.waistFront / 2\n  if (m.hightBust && m.highBustFront) m.highBustBack = m.highBust - m.highBustFront\n\n  return m\n}\n","import complete from './complete'\n\n/*\n * These are a set of measurements of an average-sized woman.\n * We simply extrapolate for other sizes (based on neck)\n * by keeping the same proportions.\n * That is almost certainly not the best sizing table you can get,\n * but we are not in the business of standard sizes, so this will do.\n */\n\nexport default complete({\n  ankle: 245,\n  biceps: 270,\n  bustFront: 480,\n  bustSpan: 160,\n  chest: 925,\n  crossSeam: 740,\n  crossSeamFront: 370,\n  crotchDepth: 270,\n  heel: 315,\n  head: 565,\n  highBust: 865,\n  highBustFront: 440,\n  hips: 900,\n  hpsToBust: 275,\n  hpsToWaistBack: 395,\n  hpsToWaistFront: 400,\n  inseam: 765,\n  knee: 380,\n  neck: 340,\n  seat: 1010,\n  seatBack: 520,\n  shoulderSlope: 13,\n  shoulderToElbow: 340,\n  shoulderToShoulder: 415,\n  shoulderToWrist: 590,\n  underbust: 780,\n  upperLeg: 570,\n  waist: 750,\n  waistBack: 380,\n  waistToFloor: 1050,\n  waistToHips: 125,\n  waistToKnee: 600,\n  waistToSeat: 250,\n  waistToUnderbust: 80,\n  waistToUpperLeg: 285,\n  wrist: 165\n})\n","import complete from './complete'\n\n/*\n * These are a set of measurements of an average-sized man.\n * We simply extrapolate for other sizes (based on neck)\n * by keeping the same proportions.\n * That is almost certainly not the best sizing table you can get,\n * but we are not in the business of standard sizes, so this will do.\n */\nexport default complete({\n  ankle: 235,\n  biceps: 350,\n  chest: 1000,\n  crossSeam: 870,\n  crossSeamFront: 410,\n  crotchDepth: 340,\n  heel: 360,\n  head: 590,\n  hips: 840,\n  hpsToBust: 280,\n  hpsToWaistBack: 470,\n  inseam: 780,\n  knee: 410,\n  neck: 380,\n  seat: 1020,\n  seatBack: 560,\n  shoulderSlope: 13,\n  shoulderToElbow: 360,\n  shoulderToShoulder: 450,\n  shoulderToWrist: 630,\n  upperLeg: 625,\n  waist: 810,\n  waistBack: 410,\n  waistToFloor: 1160,\n  waistToHips: 130,\n  waistToKnee: 640,\n  waistToSeat: 270,\n  waistToUpperLeg: 340,\n  wrist: 175\n})\n","/*\n * Since linear measurements don't scale the same as circumference\n * measurements, we apply a correction ratio.\n */\n\nlet a = 0.5 // arc\nlet c = 1 // circumference\nlet v = 0.65 // vertical\n\nexport default {\n  // Arc measurements\n  bustFront: a,\n  bustSpan: a,\n  highBustFront: a,\n  // Circumference measurements\n  ankle: c,\n  biceps: c,\n  chest: c,\n  highBust: c,\n  hips: c,\n  neck: c,\n  underbust: c,\n  // Vertical measurements\n  crotchDepth: v,\n  hpsToBust: v,\n  hpsToWaistBack: v,\n  hpsToWaistFront: v,\n  waistToHips: v,\n  waistToKnee: v,\n  waistToSeat: v,\n  waistToUnderbust: v,\n  waistToUpperLeg: v,\n  // Other\n  seatBack: 0.6,\n  waistBack: 0.85,\n  crossSeam: 0.6,\n  crossSeamFront: 0.3,\n  head: 0.35,\n  heel: 0.25,\n  inseam: 0.25,\n  knee: 0.65,\n  seat: 0.6,\n  shoulderToElbow: 0.5,\n  shoulderToShoulder: 0.65,\n  shoulderToWrist: 0.3,\n  upperLeg: 0.45,\n  waist: 0.85,\n  waistToFloor: 0.4,\n  wrist: 0.5\n}\n","import withBreasts from './with-breasts'\nimport withoutBreasts from './without-breasts'\nimport ratio from './ratio'\n\n// This estimates a measurement based on the neck\nconst neckstimate = (neck = false, measurement = false, breasts = false, noRound=false) => {\n  let data = breasts ? withBreasts : withoutBreasts\n\n  // Shoulder slope is in degrees now. Always return de default.\n  if (measurement === 'shoulderSlope') return withBreasts.shoulderSlope\n\n  if (!neck) throw new Error('neckstimate() requires a neck measurement in mm as first parameter')\n  if (!measurement) {\n    // No measurement passed\n    throw new Error(\n      'new neckstimate() requires a valid measurement name as second parameter. (received ' +\n        JSON.stringify(measurement) +\n        ')'\n    )\n  }\n  if (typeof data[measurement] === 'undefined') {\n    if (typeof withBreasts[measurement] === 'undefined') {\n      // We used to throw this error, but let's just return null instead so things don't go off the rails\n      console.log(\n        new Error(`neckstimate() called with an invalid measurement name (${measurement})`)\n      )\n      return null\n    } else {\n      console.log(\n        `WARNING: neckstimate() called for a breasts-only measurement (${measurement}) on a no-breasts person`\n      )\n      // Return something anyway, rather than fall over\n      data = withBreasts\n    }\n  }\n\n  // This is what should happen\n  let delta = (neck / data.neck) * data[measurement] - data[measurement]\n\n  return noRound\n    ? data[measurement] + delta * ratio[measurement]\n    : Math.round(data[measurement] + delta * ratio[measurement])\n}\n\nexport default neckstimate\n"]},"metadata":{},"sourceType":"module"}