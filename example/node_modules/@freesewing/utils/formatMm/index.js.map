{"version":3,"file":"index.js","sources":["../src/roundMm/index.js","../src/formatImperial/index.js","../src/formatMm/index.js"],"sourcesContent":["const roundMm = (val, units) => {\n  if (units === \"imperial\") return Math.round(val * 1000000) / 1000000;\n  else return Math.round(val * 10) / 10;\n};\n\nexport default roundMm;\n","const formatImperial = (neg, inch, numo = false, deno = false, format = 'html') => {\n  if (format === 'html') {\n    if (numo) return `<span>${neg}${inch}&nbsp;<sup>${numo}</sup>/<sub>${deno}</sub></span>`\n    else return `<span>${neg}${inch}</span>`\n  } else {\n    if (numo) return `${neg}${inch} ${numo}/${deno}`\n    else return `${neg}${inch}`\n  }\n}\n\nexport default formatImperial\n","import roundMm from '../roundMm'\nimport formatImperial from '../formatImperial'\n\nconst formatMm = (val, units, format = 'html') => {\n  val = roundMm(val)\n  if (units === 'imperial') {\n    if (val == 0) return formatImperial('', 0, false, false, format)\n    let negative = ''\n    let inches = ''\n    let rest = ''\n    let fraction = val / 25.4\n    if (fraction < 0) {\n      fraction = fraction * -1\n      negative = '-'\n    }\n    if (Math.abs(fraction) < 1) rest = fraction\n    else {\n      inches = Math.floor(fraction)\n      rest = fraction - inches\n    }\n    let suffix = ''\n    if (format === 'html') suffix = '\"'\n    let fraction128 = Math.round(rest * 128)\n    if (fraction128 == 0) return formatImperial(negative, inches, false, false, format)\n    if (fraction128 % 64 == 0)\n      return formatImperial(negative, inches, fraction128 / 64, 2, format) + suffix\n    if (fraction128 % 32 == 0)\n      return formatImperial(negative, inches, fraction128 / 32, 4, format) + suffix\n    if (fraction128 % 16 == 0)\n      return formatImperial(negative, inches, fraction128 / 16, 8, format) + suffix\n    if (fraction128 % 8 == 0)\n      return formatImperial(negative, inches, fraction128 / 8, 16, format) + suffix\n    if (fraction128 % 4 == 0)\n      return formatImperial(negative, inches, fraction128 / 4, 32, format) + suffix\n    if (fraction128 % 2 == 0)\n      return formatImperial(negative, inches, fraction128 / 2, 64, format) + suffix\n\n    return negative + Math.round(fraction * 100) / 100 + suffix\n  } else {\n    if (format === 'html') return roundMm(val / 10) + 'cm'\n    else return roundMm(val / 10)\n  }\n}\n\nexport default formatMm\n"],"names":["roundMm","val","units","Math","round","formatImperial","neg","inch","numo","deno","format","formatMm","negative","inches","rest","fraction","abs","floor","suffix","fraction128"],"mappings":"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"}