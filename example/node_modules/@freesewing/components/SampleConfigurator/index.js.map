{"version":3,"file":"index.js","sources":["../src/SampleConfigurator/OptionGroup/index.js","../src/SampleConfigurator/PatternOptions/index.js","../src/SampleConfigurator/index.js"],"sourcesContent":["import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { injectIntl } from 'react-intl'\n\nconst OptionGroup = (props) => {\n  return (\n    <React.Fragment>\n      {props.options.map((name) => {\n        let output = []\n        if (typeof name === 'object') {\n          // Subgroup\n          for (let subGroup of Object.keys(name)) {\n            output.push(\n              <h5 key={subGroup + '-title'}>\n                <FormattedMessage id={'optiongroups.' + subGroup} />\n              </h5>\n            )\n            let children = []\n            for (let option of name[subGroup])\n              children.push(\n                <li>\n                  <a\n                    href=\"#logo\"\n                    onClick={() => props.sampleOption(option)}\n                    className={props.activeOption === option ? 'active' : ''}\n                  >\n                    <FormattedMessage\n                      id={'options.' + props.config.name + '.' + option + '.title'}\n                    />\n                  </a>\n                </li>\n              )\n            output.push(<ul style={{ paddingLeft: '1rem' }}>{children}</ul>)\n          }\n        } else\n          output.push(\n            <li>\n              <a\n                href=\"#logo\"\n                onClick={() => props.sampleOption(name)}\n                className={props.activeOption === name ? 'active' : ''}\n              >\n                <FormattedMessage id={'options.' + props.config.name + '.' + name + '.title'} />\n              </a>\n            </li>\n          )\n\n        return output\n      })}\n    </React.Fragment>\n  )\n}\n\nexport default injectIntl(OptionGroup)\n","import React from 'react'\nimport OptionGroup from '../OptionGroup'\nimport { FormattedMessage } from 'react-intl'\n\nconst PatternOptions = (props) => {\n  const renderGroup = (group) => {\n    let output = []\n    let children = (\n      <ul>\n        <OptionGroup\n          key={group + '-group'}\n          units={props.units}\n          config={props.config}\n          options={props.config.optionGroups[group]}\n          sampleOption={props.sampleOption}\n          activeOption={props.activeOption}\n        />\n      </ul>\n    )\n    output.push(\n      <li key={group + '-ghead'}>\n        <h6>\n          <FormattedMessage id={'optiongroups.' + group} />\n        </h6>\n        {children}\n      </li>\n    )\n\n    return output\n  }\n\n  return <ul>{Object.keys(props.config.optionGroups).map((group) => renderGroup(group))}</ul>\n}\n\nexport default PatternOptions\n","import React, { useState } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport PatternOptions from './PatternOptions'\nimport { withBreasts, withoutBreasts } from '@freesewing/models'\nimport neckstimate from '@freesewing/utils/neckstimate'\n\nconst SampleConfigurator = (props) => {\n  const [type, setType] = useState()\n  const [instance, setInstance] = useState()\n\n  const sampleOption = (option) => {\n    setType('option')\n    setInstance(option)\n    props.updateGist(\n      {\n        type: 'option',\n        option\n      },\n      'settings',\n      'sample'\n    )\n  }\n\n  const sampleMeasurement = (measurement) => {\n    setType('measurement')\n    setInstance(measurement)\n    props.updateGist(\n      {\n        type: 'measurement',\n        measurement\n      },\n      'settings',\n      'sample'\n    )\n  }\n\n  const sampleModels = (models) => {\n    setType('models')\n    props.updateGist(\n      {\n        type: 'models',\n        models\n      },\n      'settings',\n      'sample'\n    )\n  }\n  const antMan = { ant: {}, b: {}, c: {}, man: {} }\n  const antWoman = { ant: {}, b: {}, c: {}, woman: {} }\n  for (let m in withoutBreasts.size42) {\n    let val = neckstimate(420, m, false)\n    antMan.ant[m] = val / 10\n    antMan.b[m] = val / 5\n    antMan.c[m] = val / 2\n    antMan.man[m] = val\n  }\n  for (let m in withBreasts.size36) {\n    let val = neckstimate(360, m, true)\n    antWoman.ant[m] = val / 10\n    antWoman.b[m] = val / 5\n    antWoman.c[m] = val / 2\n    antWoman.woman[m] = val\n  }\n\n  return (\n    <ul>\n      <li>\n        <h5>\n          <FormattedMessage id=\"app.patternOptions\" />\n        </h5>\n        <PatternOptions\n          config={props.config}\n          gist={props.gist}\n          sampleOption={sampleOption}\n          activeOption={type === 'option' ? instance : null}\n        />\n      </li>\n      <li>\n        <h5>\n          <FormattedMessage id=\"app.measurements\" />\n        </h5>\n        <ul>\n          {props.config.measurements.map((m) => (\n            <li key={m}>\n              <a\n                href=\"#logo\"\n                onClick={() => sampleMeasurement(m)}\n                className={type === 'measurement' && instance === m ? 'active' : ''}\n              >\n                <FormattedMessage id={'measurements.' + m} />\n              </a>\n            </li>\n          ))}\n        </ul>\n      </li>\n      <li>\n        <h5>\n          <FormattedMessage id=\"app.people\" />\n        </h5>\n        <ul>\n          <li>\n            <a\n              href=\"#logo\"\n              onClick={() => {\n                sampleModels(withBreasts)\n                setType('models')\n                setInstance('withBreasts')\n              }}\n              className={type === 'models' && instance === 'withBreasts' ? 'active' : ''}\n            >\n              <FormattedMessage id=\"app.withBreasts\" />\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#logo\"\n              onClick={() => {\n                sampleModels(withoutBreasts)\n                setType('models')\n                setInstance('withoutBreasts')\n              }}\n              className={type === 'models' && instance === 'withoutBreasts' ? 'active' : ''}\n            >\n              <FormattedMessage id=\"app.withoutBreasts\" />\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#logo\"\n              onClick={() => {\n                sampleModels(antWoman)\n                setType('models')\n                setInstance('antWoman')\n              }}\n              className={type === 'models' && instance === 'antWoman' ? 'active' : ''}\n            >\n              Antperson (with breasts)\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#logo\"\n              onClick={() => {\n                sampleModels(antMan)\n                setType('models')\n                setInstance('antMan')\n              }}\n              className={type === 'models' && instance === 'antMan' ? 'active' : ''}\n            >\n              Antperson (without breasts)\n            </a>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  )\n}\n\nexport default SampleConfigurator\n"],"names":["OptionGroup","props","React","options","map","name","output","Object","keys","subGroup","push","FormattedMessage","children","option","sampleOption","activeOption","config","paddingLeft","injectIntl","PatternOptions","renderGroup","group","units","optionGroups","SampleConfigurator","useState","type","setType","instance","setInstance","updateGist","sampleMeasurement","measurement","sampleModels","models","antMan","ant","b","c","man","antWoman","woman","m","withoutBreasts","size42","val","neckstimate","withBreasts","size36","gist","measurements"],"mappings":"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"}