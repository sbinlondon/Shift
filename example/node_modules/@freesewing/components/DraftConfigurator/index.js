/**
 * @freesewing/components | v2.17.0
 * A collection of React components for FreeSewing web UIs
 * (c) 2021 Joost De Cock <joost@joost.at> (https://github.com/joostdecock)
 * @license MIT
 */
'use strict';

var React = require('react');
var reactIntl = require('react-intl');
var Slider = require('@material-ui/core/Slider');
var styles = require('@material-ui/core/styles');
var IconButton = require('@material-ui/core/IconButton');
var RightIcon = require('@material-ui/icons/KeyboardArrowRight');
var ResetIcon = require('@material-ui/icons/SettingsBackupRestore');
var sliderStep = require('@freesewing/utils/sliderStep');
var roundMm = require('@freesewing/utils/roundMm');
var roundMmUp = require('@freesewing/utils/roundMmUp');
var roundMmDown = require('@freesewing/utils/roundMmDown');
var formatMm = require('@freesewing/utils/formatMm');
var Radio = require('@material-ui/core/Radio');
var RadioGroup = require('@material-ui/core/RadioGroup');
var FormControlLabel = require('@material-ui/core/FormControlLabel');
var optionType = require('@freesewing/utils/optionType');
var optionDefault = require('@freesewing/utils/optionDefault');
var defaultSa = require('@freesewing/utils/defaultSa');
var i18n = require('@freesewing/i18n');
var FormGroup = require('@material-ui/core/FormGroup');
var Checkbox = require('@material-ui/core/Checkbox');
var TuneIcon = require('@material-ui/icons/Tune');
var WrenchIcon = require('@material-ui/icons/Build');
var PlayIcon = require('@material-ui/icons/PlayCircleOutline');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var Slider__default = /*#__PURE__*/_interopDefaultLegacy(Slider);
var IconButton__default = /*#__PURE__*/_interopDefaultLegacy(IconButton);
var RightIcon__default = /*#__PURE__*/_interopDefaultLegacy(RightIcon);
var ResetIcon__default = /*#__PURE__*/_interopDefaultLegacy(ResetIcon);
var sliderStep__default = /*#__PURE__*/_interopDefaultLegacy(sliderStep);
var roundMm__default = /*#__PURE__*/_interopDefaultLegacy(roundMm);
var roundMmUp__default = /*#__PURE__*/_interopDefaultLegacy(roundMmUp);
var roundMmDown__default = /*#__PURE__*/_interopDefaultLegacy(roundMmDown);
var formatMm__default = /*#__PURE__*/_interopDefaultLegacy(formatMm);
var Radio__default = /*#__PURE__*/_interopDefaultLegacy(Radio);
var RadioGroup__default = /*#__PURE__*/_interopDefaultLegacy(RadioGroup);
var FormControlLabel__default = /*#__PURE__*/_interopDefaultLegacy(FormControlLabel);
var optionType__default = /*#__PURE__*/_interopDefaultLegacy(optionType);
var optionDefault__default = /*#__PURE__*/_interopDefaultLegacy(optionDefault);
var defaultSa__default = /*#__PURE__*/_interopDefaultLegacy(defaultSa);
var FormGroup__default = /*#__PURE__*/_interopDefaultLegacy(FormGroup);
var Checkbox__default = /*#__PURE__*/_interopDefaultLegacy(Checkbox);
var TuneIcon__default = /*#__PURE__*/_interopDefaultLegacy(TuneIcon);
var WrenchIcon__default = /*#__PURE__*/_interopDefaultLegacy(WrenchIcon);
var PlayIcon__default = /*#__PURE__*/_interopDefaultLegacy(PlayIcon);

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var PaddedSlider = styles.withStyles({
  container: {
    padding: '25px 0'
  },
  track: {
    height: '4px'
  },
  thumb: {
    width: '16px',
    height: '16px'
  }
})(Slider__default['default']);

var FormFieldSlider = function FormFieldSlider(_ref) {
  var _ref$min = _ref.min,
      min = _ref$min === void 0 ? 0 : _ref$min,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 100 : _ref$max,
      _ref$step = _ref.step,
      step = _ref$step === void 0 ? 0.1 : _ref$step,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? false : _ref$label,
      updateValue = _ref.updateValue,
      name = _ref.name,
      value = _ref.value;

  var _useState = React.useState(value),
      _useState2 = _slicedToArray(_useState, 2),
      val = _useState2[0],
      setVal = _useState2[1];

  React.useEffect(function () {
    if (value !== val) setVal(value);
  }, [value]);

  var update = function update(evt, newValue) {
    updateValue(name, newValue, evt);
    setVal(newValue);
  };

  return /*#__PURE__*/React__default['default'].createElement(PaddedSlider, {
    value: val,
    min: min,
    max: max,
    step: step,
    onChange: update,
    onChangeCommitted: update,
    classes: {
      track: 'slider-track',
      thumb: 'slider-thumb'
    },
    "aria-labelledby": label
  });
};

var OptionPreamble = function OptionPreamble(_ref) {
  var intl = _ref.intl,
      title = _ref.title,
      desc = _ref.desc,
      dflt = _ref.dflt,
      designDflt = _ref.designDflt,
      option = _ref.option,
      value = _ref.value,
      displayValue = _ref.displayValue,
      _ref$displayFormat = _ref.displayFormat,
      displayFormat = _ref$displayFormat === void 0 ? 'node' : _ref$displayFormat,
      sameButDifferent = _ref.sameButDifferent,
      expanded = _ref.expanded,
      toggleExpanded = _ref.toggleExpanded,
      reset = _ref.reset,
      designReset = _ref.designReset;
  var styles = {
    container: {
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'center'
    },
    left: {
      flexGrow: 1,
      margin: '0 0.5rem'
    },
    right: {
      margin: '0 5px 0 0 ',
      textAlign: 'right'
    }
  };
  var resetLabel = intl.formatMessage({
    id: 'app.restoreDefaults',
    defaultMessage: ' ♻️  '
  });
  var resetDesignLabel = intl.formatMessage({
    id: 'app.restoreDesignDefaults',
    defaultMessage: ' ♻️  '
  });
  var resetPatternLabel = intl.formatMessage({
    id: 'app.restorePatternDefaults',
    defaultMessage: ' ♻️  '
  });
  var pattern = false;
  if (dflt !== designDflt) pattern = true;
  var displayClass = value === dflt ? 'dflt' : 'custom';
  if (pattern && value === designDflt) displayClass = 'p-dflt';else if (pattern && sameButDifferent) displayClass = 'custom';
  var dspValue = /*#__PURE__*/React__default['default'].createElement("span", {
    className: displayClass
  }, displayValue);
  if (displayFormat === 'html') dspValue = /*#__PURE__*/React__default['default'].createElement("span", {
    className: displayClass,
    dangerouslySetInnerHTML: {
      __html: displayValue
    }
  });
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("div", {
    onClick: toggleExpanded,
    style: styles.container
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    style: styles.left
  }, /*#__PURE__*/React__default['default'].createElement(RightIcon__default['default'], {
    className: 'icon-col-exp ' + (expanded ? 'expanded' : 'collapsed')
  }), title), /*#__PURE__*/React__default['default'].createElement("div", {
    style: styles.right
  }, dspValue)), /*#__PURE__*/React__default['default'].createElement("div", {
    className: expanded ? 'col-exp expanded' : 'col-exp collapsed'
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    style: styles.container
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    style: styles.left
  }, /*#__PURE__*/React__default['default'].createElement("p", null, desc)), /*#__PURE__*/React__default['default'].createElement("div", {
    style: styles.right
  }, pattern ? /*#__PURE__*/React__default['default'].createElement(IconButton__default['default'], {
    title: resetDesignLabel,
    "aria-label": resetDesignLabel,
    color: "primary",
    disabled: value === designDflt ? true : false,
    onClick: designReset,
    className: "mini-icon-btn pattern"
  }, /*#__PURE__*/React__default['default'].createElement(ResetIcon__default['default'], null)) : null, /*#__PURE__*/React__default['default'].createElement(IconButton__default['default'], {
    title: pattern ? resetPatternLabel : resetLabel,
    "aria-label": pattern ? resetPatternLabel : resetLabel,
    color: "primary",
    disabled: value === dflt && !sameButDifferent ? true : false,
    onClick: reset,
    className: 'mini-icon-btn' + (pattern ? ' pattern' : '')
  }, /*#__PURE__*/React__default['default'].createElement(ResetIcon__default['default'], null)))), option));
};

var OptionPreamble$1 = reactIntl.injectIntl(OptionPreamble);

var PatternOptionPctDegCount = function PatternOptionPctDegCount(_ref) {
  var _ref$min = _ref.min,
      min = _ref$min === void 0 ? 0 : _ref$min,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 100 : _ref$max,
      _ref$step = _ref.step,
      step = _ref$step === void 0 ? 0.1 : _ref$step,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'pct' : _ref$type,
      updateValue = _ref.updateValue,
      name = _ref.name,
      dflt = _ref.dflt,
      designDflt = _ref.designDflt,
      title = _ref.title,
      desc = _ref.desc,
      value = _ref.value,
      raiseEvent = _ref.raiseEvent,
      noDocs = _ref.noDocs;
  var factor = 1;
  if (type === 'pct') factor = 100;

  var round = function round(val) {
    return Math.round(val * 10) / 10;
  };

  var _useState = React.useState(value === null ? dflt : round(value * factor)),
      _useState2 = _slicedToArray(_useState, 2),
      val = _useState2[0],
      setVal = _useState2[1];

  var _useState3 = React.useState(value === null ? dflt : round(value * factor)),
      _useState4 = _slicedToArray(_useState3, 2);
      _useState4[0];
      _useState4[1];

  var _useState5 = React.useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      expanded = _useState6[0],
      setExpanded = _useState6[1];

  var update = function update(name, newValue, evt) {
    newValue = round(newValue); // Sometimes, when sliding, the rapid succession of updates
    // causes a weird timing issue to result in a value that is NaN.
    // If that's the case, just ignore this update and keep the
    // previous one instead

    if (!isNaN(newValue)) {
      setVal(newValue);
      if (evt.type !== 'mousemove') updateValue(name, newValue / factor);
    } else {
      if (evt.type !== 'mousemove') updateValue(name, value / factor);
    }
  };

  var reset = function reset() {
    setVal(dflt);
    updateValue(name, dflt / factor);
  };

  var patternReset = function patternReset() {
    setVal(designDflt);
    updateValue(name, designDflt / factor);
  };

  var toggleExpanded = function toggleExpanded() {
    return setExpanded(!expanded);
  };

  var unit = '';
  if (type === 'pct') unit = '%';
  if (type === 'deg') unit = '°';
  var option = /*#__PURE__*/React__default['default'].createElement(FormFieldSlider, {
    name: name,
    value: val,
    min: min,
    max: max,
    step: type === 'count' ? 1 : step,
    onChange: update,
    label: 'po-' + type + '-' + name,
    updateValue: update
  });
  return /*#__PURE__*/React__default['default'].createElement("li", {
    className: expanded ? 'expanded' : 'collapsed'
  }, /*#__PURE__*/React__default['default'].createElement(OptionPreamble$1, {
    dflt: dflt,
    designDflt: designDflt,
    value: val,
    desc: desc,
    title: title,
    id: 'po-' + type + '-' + name,
    displayValue: val + unit,
    reset: reset,
    patternReset: patternReset,
    toggleExpanded: toggleExpanded,
    expanded: expanded,
    showHelp: function showHelp() {
      return raiseEvent('showHelp', {
        type: 'patternOption',
        value: name
      });
    },
    option: option,
    noDocs: noDocs
  }));
};

var Pct = (function (props) {
  return /*#__PURE__*/React__default['default'].createElement(PatternOptionPctDegCount, _extends({}, props, {
    type: "pct"
  }));
});

var Deg = (function (props) {
  return /*#__PURE__*/React__default['default'].createElement(PatternOptionPctDegCount, _extends({}, props, {
    type: "deg"
  }));
});

var PatternOptionMillimeter = function PatternOptionMillimeter(_ref) {
  var _ref$title = _ref.title,
      title = _ref$title === void 0 ? false : _ref$title,
      _ref$desc = _ref.desc,
      desc = _ref$desc === void 0 ? false : _ref$desc,
      _ref$units = _ref.units,
      units = _ref$units === void 0 ? 'metric' : _ref$units,
      _ref$min = _ref.min,
      min = _ref$min === void 0 ? 0 : _ref$min,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 100 : _ref$max,
      updateValue = _ref.updateValue,
      name = _ref.name,
      dflt = _ref.dflt,
      value = _ref.value,
      raiseEvent = _ref.raiseEvent,
      noDocs = _ref.noDocs;

  var _useState = React.useState(value === null ? dflt : value),
      _useState2 = _slicedToArray(_useState, 2),
      val = _useState2[0],
      setVal = _useState2[1];

  var _useState3 = React.useState(dflt),
      _useState4 = _slicedToArray(_useState3, 2);
      _useState4[0];
      _useState4[1];

  var _useState5 = React.useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      expanded = _useState6[0],
      setExpanded = _useState6[1];

  var update = function update(name, newValue, evt) {
    newValue = roundMm__default['default'](newValue, units); // Sometimes, when sliding, the rapid succession of updates
    // causes a weird timing issue to result in a value that is NaN.
    // If that's the case, just ignore this update and keep the
    // previous one instead

    if (!isNaN(newValue)) {
      setVal(newValue);
      if (evt.type !== 'mousemove') updateValue(name, newValue);
    } else {
      if (evt.type !== 'mousemove') updateValue(name, val);
    }
  };

  var reset = function reset() {
    setVal(dflt);
    updateValue(name, dflt);
  };

  var toggleExpanded = function toggleExpanded() {
    return setExpanded(!expanded);
  };

  var option = /*#__PURE__*/React__default['default'].createElement(FormFieldSlider, {
    name: name,
    value: val,
    min: roundMmUp__default['default'](min, units),
    max: roundMmDown__default['default'](max, units),
    step: sliderStep__default['default'][units],
    onChange: update,
    label: 'po-mm-' + name,
    updateValue: update
  });
  return /*#__PURE__*/React__default['default'].createElement("li", {
    className: expanded ? 'expanded' : 'collapsed'
  }, /*#__PURE__*/React__default['default'].createElement(OptionPreamble$1, {
    dflt: dflt,
    value: val,
    desc: desc,
    title: title,
    id: 'po-mm-' + name,
    displayValue: formatMm__default['default'](val, units),
    displayFormat: "html",
    reset: reset,
    toggleExpanded: toggleExpanded,
    expanded: expanded,
    showHelp: function showHelp() {
      return raiseEvent('showHelp', {
        type: 'patternOption',
        value: name
      });
    },
    option: option,
    noDocs: noDocs
  }));
};

var Bool = function Bool(_ref) {
  var _ref$dflt = _ref.dflt,
      dflt = _ref$dflt === void 0 ? false : _ref$dflt,
      _ref$labels = _ref.labels,
      labels = _ref$labels === void 0 ? ['false', 'true'] : _ref$labels,
      value = _ref.value,
      name = _ref.name,
      updateValue = _ref.updateValue;

  var _useState = React.useState(dflt),
      _useState2 = _slicedToArray(_useState, 2),
      val = _useState2[0],
      setVal = _useState2[1];

  React.useEffect(function () {
    if (value !== val) setVal(value);
  }, [value]);

  var toggle = function toggle() {
    updateValue(name, !val);
    setVal(!val);
  };

  return /*#__PURE__*/React__default['default'].createElement(RadioGroup__default['default'], {
    onChange: toggle,
    value: JSON.stringify(val)
  }, /*#__PURE__*/React__default['default'].createElement(FormControlLabel__default['default'], {
    control: /*#__PURE__*/React__default['default'].createElement(Radio__default['default'], {
      color: "primary"
    }),
    value: "false",
    checked: val === 'true' || val === true || val === 1 ? false : true,
    label: labels[0],
    className: "po-list-item"
  }), /*#__PURE__*/React__default['default'].createElement(FormControlLabel__default['default'], {
    control: /*#__PURE__*/React__default['default'].createElement(Radio__default['default'], {
      color: "primary"
    }),
    value: "true",
    checked: val === 'true' || val === true || val === 1 ? true : false,
    label: labels[1],
    className: "po-list-item"
  }));
};

var PatternOptionBool = function PatternOptionBool(props) {
  var _useState = React.useState(props.value === null ? props.dflt : props.value),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      expanded = _useState4[0],
      setExpanded = _useState4[1];

  var update = function update(name, newValue, evt) {
    props.updateValue(props.name, newValue);
    setValue(newValue);
  };

  var reset = function reset() {
    setValue(props.dflt);
    props.updateValue(props.name, props.dflt);
  };

  var patternReset = function patternReset() {
    setValue(props.designDflt);
    props.updateValue(props.name, props.designDflt);
  };

  var toggleExpanded = function toggleExpanded() {
    return setExpanded(!expanded);
  };

  var option = /*#__PURE__*/React__default['default'].createElement(Bool, {
    name: props.name,
    value: value,
    dflt: props.dflt,
    onChange: update,
    label: 'po-bool-' + props.name,
    updateValue: update,
    labels: props.labels
  });
  return /*#__PURE__*/React__default['default'].createElement("li", {
    className: expanded ? 'expanded' : 'collapsed'
  }, /*#__PURE__*/React__default['default'].createElement(OptionPreamble$1, {
    dflt: props.dflt,
    designDflt: props.designDflt,
    value: value,
    desc: props.desc,
    title: props.title,
    id: 'po-list-' + props.name,
    displayValue: value ? props.labels[1] : props.labels[0],
    toggleExpanded: toggleExpanded,
    expanded: expanded,
    reset: reset,
    patternReset: patternReset,
    showHelp: function showHelp() {
      return props.raiseEvent('showHelp', {
        type: 'draftSetting',
        value: props.name
      });
    },
    option: option,
    noDocs: props.noDocs
  }));
};

var FormFieldList = function FormFieldList(props) {
  var _useState = React.useState(props.dflt),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  React.useEffect(function () {
    if (props.value !== value) setValue(props.value);
  }, [props.value]);

  var update = function update(evt) {
    props.updateValue(props.name, evt.target.value);
    setValue(evt.target.value);
  };

  return /*#__PURE__*/React__default['default'].createElement(RadioGroup__default['default'], {
    onChange: update,
    value: value
  }, Object.keys(props.list).map(function (item, index) {
    return /*#__PURE__*/React__default['default'].createElement(FormControlLabel__default['default'], {
      key: item,
      control: /*#__PURE__*/React__default['default'].createElement(Radio__default['default'], {
        color: "primary"
      }),
      value: item,
      checked: value === item ? true : false,
      label: props.list[item],
      className: "po-list-item"
    });
  }));
};

var PatternOptionList = function PatternOptionList(props) {
  var _useState = React.useState(props.dflt),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      expanded = _useState4[0],
      setExpanded = _useState4[1];

  var update = function update(name, newValue, evt) {
    props.updateValue(props.name, newValue);
    setValue(newValue);
  };

  var reset = function reset() {
    setValue(props.dflt);
    props.updateValue(props.name, props.dflt);
  };

  var patternReset = function patternReset() {
    setValue(props.designDflt);
    props.updateValue(props.name, props.designDflt);
  };

  var toggleExpanded = function toggleExpanded() {
    return setExpanded(!expanded);
  }; // Add translations


  var stringKey = "options.".concat(props.pattern, ".").concat(props.name, ".options.");
  var list = {};

  var _iterator = _createForOfIteratorHelper(props.list),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;
      list[item] = props.intl.formatMessage({
        id: stringKey + item,
        defaultMessage: item
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var option = /*#__PURE__*/React__default['default'].createElement(FormFieldList, {
    name: props.name,
    value: value,
    dflt: props.dflt,
    designDflt: props.designDflt,
    onChange: update,
    label: 'po-list-' + props.name,
    updateValue: update,
    list: list
  });
  return /*#__PURE__*/React__default['default'].createElement("li", {
    className: expanded ? 'expanded' : 'collapsed'
  }, /*#__PURE__*/React__default['default'].createElement(OptionPreamble$1, {
    dflt: props.dflt,
    value: value,
    desc: props.desc,
    title: props.title,
    id: 'po-list-' + props.name,
    displayValue: list[value],
    reset: reset,
    patternReset: patternReset,
    toggleExpanded: toggleExpanded,
    expanded: expanded,
    showHelp: function showHelp() {
      return props.raiseEvent('showHelp', {
        type: 'patternOption',
        value: props.name
      });
    },
    option: option,
    noDocs: props.noDocs
  }));
};

var Count = (function (props) {
  return /*#__PURE__*/React__default['default'].createElement(PatternOptionPctDegCount, _extends({}, props, {
    type: "count"
  }));
});

var OptionSubGroup = function OptionSubGroup(_ref) {
  var title = _ref.title,
      children = _ref.children;

  var _useState = React.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  return /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement("span", {
    className: "subheading",
    onClick: function onClick() {
      return setOpen(!open);
    }
  }, /*#__PURE__*/React__default['default'].createElement(RightIcon__default['default'], {
    className: "icon-col-exp ".concat(open ? 'expanded' : '')
  }), title), open && /*#__PURE__*/React__default['default'].createElement("ul", {
    className: "config level-3"
  }, children));
};

var OptionGroup = function OptionGroup(props) {
  var renderOption = function renderOption(name) {
    var option = props.config.options[name];
    var type = optionType__default['default'](option);
    var stringKey = "options.".concat(props.config.name, ".").concat(name, ".");
    var extraProps = {
      name: name,
      dflt: optionDefault__default['default'](name, props.config.options[name], props.pattern),
      designDflt: optionDefault__default['default'](name, props.config.options[name]),
      units: props.units,
      updateValue: props.updateValue,
      raiseEvent: props.raiseEvent,
      title: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: stringKey + 'title'
      }),
      desc: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: stringKey + 'description'
      }),
      intl: props.intl,
      pattern: props.config.name,
      key: name,
      noDocs: props.noDocs
    };
    if (typeof props.data !== 'undefined' && typeof props.data.settings !== 'undefined' && typeof props.data.settings.options !== 'undefined' && typeof props.data.settings.options[name] !== 'undefined') extraProps.value = props.data.settings.options[name];else extraProps.value = null;
    var noyes = [/*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
      id: "app.no"
    }), /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
      id: "app.yes"
    })];

    switch (type) {
      case 'pct':
        return /*#__PURE__*/React__default['default'].createElement(Pct, _extends({}, option, extraProps));

      case 'deg':
        return /*#__PURE__*/React__default['default'].createElement(Deg, _extends({}, option, extraProps));

      case 'mm':
        return /*#__PURE__*/React__default['default'].createElement(PatternOptionMillimeter, _extends({}, option, extraProps, {
          units: props.units
        }));

      case 'bool':
        return /*#__PURE__*/React__default['default'].createElement(PatternOptionBool, _extends({}, option, extraProps, {
          labels: noyes
        }));

      case 'list':
        return /*#__PURE__*/React__default['default'].createElement(PatternOptionList, _extends({}, option, extraProps));

      case 'count':
        return /*#__PURE__*/React__default['default'].createElement(Count, _extends({}, option, extraProps));

      default:
        throw new Error('Unsupported option type: ' + type);
    }
  };

  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, props.options.map(function (name) {
    var output = [];

    if (_typeof(name) === 'object') {
      // Subgroup
      for (var _i = 0, _Object$keys = Object.keys(name); _i < _Object$keys.length; _i++) {
        var subGroup = _Object$keys[_i];
        var children = [];

        var _iterator = _createForOfIteratorHelper(name[subGroup]),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var option = _step.value;
            children.push(renderOption(option, true));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        output.push( /*#__PURE__*/React__default['default'].createElement(OptionSubGroup, {
          title: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
            id: 'optiongroups.' + subGroup
          }),
          children: children,
          key: subGroup
        }));
      }
    } else output.push(renderOption(name));

    return output;
  }));
};

var OptionGroup$1 = reactIntl.injectIntl(OptionGroup);

var PatternOptions = function PatternOptions(props) {
  var _useState = React.useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var toggleGroup = function toggleGroup(group) {
    var shown = expanded.slice(0);
    var index = shown.indexOf(group);
    if (index === -1) shown.push(group);else shown.splice(index, 1);
    setExpanded(shown);
  };

  var renderGroup = function renderGroup(group) {
    var open = true;
    if (expanded.indexOf(group) === -1) open = false;
    var output = [];
    var children = null;
    if (expanded.indexOf(group) !== -1) children = /*#__PURE__*/React__default['default'].createElement("ul", {
      className: "config level-2"
    }, /*#__PURE__*/React__default['default'].createElement(OptionGroup$1, {
      noDocs: props.noDocs,
      key: group + '-group',
      units: props.units,
      config: props.config,
      data: props.data,
      pattern: props.pattern,
      options: props.config.optionGroups[group],
      updateValue: props.updateValue,
      raiseEvent: props.raiseEvent
    }));
    output.push( /*#__PURE__*/React__default['default'].createElement("li", {
      className: open ? 'expanded' : 'collapsed',
      key: group + '-ghead'
    }, /*#__PURE__*/React__default['default'].createElement("span", {
      onClick: function onClick() {
        return toggleGroup(group);
      }
    }, /*#__PURE__*/React__default['default'].createElement(RightIcon__default['default'], {
      className: 'icon-col-exp ' + (open ? 'expanded' : 'collapsed')
    }), /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
      id: 'optiongroups.' + group
    })), children));
    return output;
  };

  var children = [];

  for (var group in props.config.optionGroups) {
    if (props.data.settings.advanced || group !== 'advanced') {
      children.push(renderGroup(group));
    }
  }

  return /*#__PURE__*/React__default['default'].createElement("ul", {
    className: "config level-1"
  }, children);
};

var DraftSettingSa = function DraftSettingSa(props) {
  var _useState = React.useState(props.value === defaultSa__default['default'][props.units] ? 'dflt' : props.value === 0 ? 'none' : 'custom'),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = React.useState(props.value === null ? defaultSa__default['default'][props.units] : props.value),
      _useState4 = _slicedToArray(_useState3, 2),
      saValue = _useState4[0],
      setSaValue = _useState4[1];

  var _useState5 = React.useState(value === 'custom' ? props.value : 10),
      _useState6 = _slicedToArray(_useState5, 2),
      customValue = _useState6[0],
      setCustomValue = _useState6[1];

  var _useState7 = React.useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      expanded = _useState8[0],
      setExpanded = _useState8[1];

  var update = function update(name, newValue, evt) {
    switch (newValue) {
      case 'none':
        props.updateValue('sa', 0);
        setValue(newValue);
        setSaValue(0);
        break;

      case 'dflt':
        props.updateValue('sa', defaultSa__default['default'][props.units]);
        setValue(newValue);
        setSaValue(defaultSa__default['default'][props.units]);
        break;

      default:
        props.updateValue('sa', customValue);
        setValue(newValue);
        setSaValue(customValue);
        break;
    }
  };

  var saDfltToggle = 'dflt';
  if (props.dflt === 0) saDfltToggle = 'none';
  if (props.dflt !== 10) saDfltToggle = 'custom';

  var reset = function reset() {
    setValue(saDfltToggle);
    setSaValue(props.dflt);
    props.updateValue('sa', props.dflt);
  };

  var patternReset = function patternReset() {
    setValue('dflt');
    setSaValue(defaultSa__default['default'][props.units]);
    props.updateValue('sa', defaultSa__default['default'][props.units]);
  };

  var toggleExpanded = function toggleExpanded() {
    return setExpanded(!expanded);
  };

  var updateCustom = function updateCustom(name, newValue, evt) {
    newValue = roundMm__default['default'](newValue); // Sometimes, when sliding, the rapid succession of updates
    // causes a weird timing issue to result in a value that is NaN.
    // If that's the case, just ignore this update and keep the
    // previous one instead

    if (!isNaN(newValue)) {
      setSaValue(newValue);
      setCustomValue(newValue);
      if (evt.type !== 'mousemove') props.updateValue('sa', newValue);
    } else {
      props.updateValue('sa', customValue);
    }
  };

  var list = {
    none: props.labels.none,
    dflt: props.labels.dflt,
    custom: props.labels.custom
  };
  var option = /*#__PURE__*/React__default['default'].createElement(FormFieldList, {
    name: "sa",
    value: value,
    dflt: 'dflt',
    onChange: update,
    label: "po-bool-sa",
    updateValue: update,
    list: list
  });
  if (value === 'custom') option = /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, option, /*#__PURE__*/React__default['default'].createElement(FormFieldSlider, {
    name: "customSa",
    value: saValue,
    dflt: defaultSa__default['default'][props.units],
    label: "po-bool-sa",
    updateValue: updateCustom,
    min: 0,
    max: 25.4,
    step: sliderStep__default['default'][props.units]
  }));
  return /*#__PURE__*/React__default['default'].createElement("li", {
    className: expanded ? 'expanded' : 'collapsed'
  }, /*#__PURE__*/React__default['default'].createElement(OptionPreamble$1, {
    dflt: saDfltToggle,
    designDflt: 'dflt',
    sameButDifferent: props.dflt !== props.value,
    value: value,
    desc: props.desc,
    title: props.title,
    id: "po-list-sa",
    displayValue: formatMm__default['default'](saValue, props.units),
    displayFormat: "html",
    reset: reset,
    patternReset: patternReset,
    toggleExpanded: toggleExpanded,
    expanded: expanded,
    showHelp: function showHelp() {
      return props.raiseEvent('showHelp', {
        type: 'draftSetting',
        value: 'sa'
      });
    },
    option: option,
    noDocs: props.noDocs
  }));
};

var DraftSettingMargin = function DraftSettingMargin(props) {
  var _useState = React.useState(props.value === null ? props.dflt : props.value),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      expanded = _useState4[0],
      setExpanded = _useState4[1];

  var update = function update(name, newValue, evt) {
    newValue = roundMm__default['default'](newValue); // Sometimes, when sliding, the rapid succession of updates
    // causes a weird timing issue to result in a value that is NaN.
    // If that's the case, just ignore this update and keep the
    // previous one instead

    if (!isNaN(newValue)) {
      setValue(newValue);
      if (evt.type !== 'mousemove') props.updateValue('margin', newValue);
    } else {
      props.updateValue('margin', value);
    }
  };

  var reset = function reset() {
    setValue(props.dflt);
    props.updateValue('margin', props.dflt);
  };

  var patternReset = function patternReset() {
    setValue(props.designDflt);
    props.updateValue('margin', props.designDflt);
  };

  var toggleExpanded = function toggleExpanded() {
    return setExpanded(!expanded);
  };

  var option = /*#__PURE__*/React__default['default'].createElement(FormFieldSlider, {
    name: "customSa",
    value: value,
    dflt: props.dflt,
    label: "po-slider-margin",
    updateValue: update,
    min: 0,
    max: 25.4,
    step: sliderStep__default['default'][props.units]
  });
  return /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement(OptionPreamble$1, {
    dflt: props.dflt,
    designDflt: props.designDflt,
    value: value,
    desc: props.desc,
    title: props.title,
    id: "po-slider-margin",
    displayValue: formatMm__default['default'](value, props.units),
    displayFormat: "html",
    reset: reset,
    patternReset: patternReset,
    toggleExpanded: toggleExpanded,
    expanded: expanded,
    showHelp: function showHelp() {
      return props.raiseEvent('showHelp', {
        type: 'draftSetting',
        value: 'margin'
      });
    },
    option: option,
    noDocs: props.noDocs
  }));
};

var DraftSettingComplete = (function (props) {
  return /*#__PURE__*/React__default['default'].createElement(PatternOptionBool, _extends({}, props, {
    name: "complete"
  }));
});

var DraftSettingPaperless = (function (props) {
  return /*#__PURE__*/React__default['default'].createElement(PatternOptionBool, _extends({}, props, {
    name: "paperless"
  }));
});

var DraftSettingAdvanced = (function (props) {
  return /*#__PURE__*/React__default['default'].createElement(PatternOptionBool, _extends({}, props, {
    name: "advanced"
  }));
});

var DraftSettingDebug = (function (props) {
  return /*#__PURE__*/React__default['default'].createElement(PatternOptionBool, _extends({}, props, {
    name: "debug"
  }));
});

var DraftSettingUnits = function DraftSettingUnits(props) {
  var _useState = React.useState(props.dflt),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      expanded = _useState4[0],
      setExpanded = _useState4[1];

  var update = function update(name, newValue, evt) {
    props.updateValue(props.name, newValue);
    setValue(newValue);
  };

  var reset = function reset() {
    setValue(props.dflt);
    props.updateValue(props.name, props.dflt);
  };

  var patternReset = function patternReset() {
    setValue(props.designDflt);
    props.updateValue(props.name, props.designDflt);
  };

  var toggleExpanded = function toggleExpanded() {
    return setExpanded(!expanded);
  };

  var option = /*#__PURE__*/React__default['default'].createElement(FormFieldList, {
    name: "units",
    value: value,
    dflt: props.dflt,
    onChange: update,
    label: "po-bool-units",
    updateValue: update,
    list: props.list
  });
  return /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement(OptionPreamble$1, {
    dflt: props.dflt,
    designDflt: props.designDflt,
    value: value,
    desc: props.desc,
    title: props.title,
    id: "po-list-units",
    displayValue: props.list[value],
    reset: reset,
    patternReset: patternReset,
    toggleExpanded: toggleExpanded,
    expanded: expanded,
    showHelp: function showHelp() {
      return props.raiseEvent('showHelp', {
        type: 'draftSetting',
        value: 'units'
      });
    },
    option: option,
    noDocs: props.noDocs
  }));
};

var DraftSettingLanguage = function DraftSettingLanguage(props) {
  var _useState = React.useState(props.value === null ? props.intl.locale : props.value),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      expanded = _useState4[0],
      setExpanded = _useState4[1];

  var update = function update(name, newValue, evt) {
    props.updateValue(props.name, newValue);
    setValue(newValue);
  };

  var reset = function reset() {
    setValue(props.dflt || props.intl.locale);
    props.updateValue(props.name, props.dflt || props.intl.locale);
  };

  var patternReset = function patternReset() {
    setValue(props.intl.locale);
    props.updateValue(props.name, props.intl.locale);
  };

  var toggleExpanded = function toggleExpanded() {
    return setExpanded(!expanded);
  };

  var option = /*#__PURE__*/React__default['default'].createElement(FormFieldList, {
    name: props.name,
    value: value,
    dflt: props.dflt,
    designDflt: props.intl.locale,
    onChange: update,
    label: 'po-list-' + props.name,
    updateValue: update,
    list: i18n.languages
  });
  return /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement(OptionPreamble$1, {
    dflt: props.dflt,
    designDflt: props.intl.locale,
    value: value,
    desc: props.desc,
    title: props.title,
    id: 'po-list-' + props.name,
    displayValue: i18n.languages[value],
    reset: reset,
    patternReset: patternReset,
    toggleExpanded: toggleExpanded,
    expanded: expanded,
    showHelp: function showHelp() {
      return props.raiseEvent('showHelp', {
        type: 'draftSetting',
        value: props.name
      });
    },
    option: option,
    noDocs: props.noDocs
  }));
};

var DraftSettingLanguage$1 = reactIntl.injectIntl(DraftSettingLanguage);

var FormFieldChecks = function FormFieldChecks(props) {
  var _useState = React.useState(props.dflt ? props.dflt : []),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var toggle = function toggle(part) {
    var parts = value.slice(0);
    var index = parts.indexOf(part);
    if (index === -1) parts.push(part);else parts.splice(index, 1);
    setValue(parts);
    props.updateValue(props.name, parts);
  };

  return /*#__PURE__*/React__default['default'].createElement(FormGroup__default['default'], null, Object.keys(props.checks).map(function (i) {
    return /*#__PURE__*/React__default['default'].createElement(FormControlLabel__default['default'], {
      control: /*#__PURE__*/React__default['default'].createElement(Checkbox__default['default'], {
        checked: value.indexOf(i) === -1 ? false : true,
        onChange: function onChange() {
          return toggle(i);
        },
        value: i
      }),
      label: props.checks[i],
      key: i,
      className: "po-list-item"
    });
  }));
};

var DraftSettingOnly = function DraftSettingOnly(props) {
  var _useState = React.useState(props.value === null ? 'dflt' : props.value === false ? 'dflt' : 'custom'),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = React.useState(value === 'custom' ? props.value : props.customDflt),
      _useState4 = _slicedToArray(_useState3, 2),
      parts = _useState4[0],
      setParts = _useState4[1];

  var _useState5 = React.useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      expanded = _useState6[0],
      setExpanded = _useState6[1];

  var update = function update(name, newValue, evt) {
    setValue(newValue);
    if (newValue === 'dflt') props.updateValue('only', false);else props.updateValue('only', parts);
  };

  var onlyDfltToggle = 'dflt';
  if (props.dflt === 'custom' || Array.isArray(props.dflt)) onlyDfltToggle = 'custom';

  var reset = function reset() {
    setValue(onlyDfltToggle);

    if (onlyDfltToggle === 'dflt') {
      setParts([]);
      props.updateValue('only', false);
    } else {
      setParts(props.dflt);
      props.updateValue('only', props.dflt);
    }
  };

  var patternReset = function patternReset() {
    setValue('dflt');
    setParts([]);
    props.updateValue('only', false);
  };

  var updateCustom = function updateCustom(name, newValue, evt) {
    props.updateValue('only', newValue);
    setParts(newValue);
  };

  var toggleExpanded = function toggleExpanded() {
    return setExpanded(!expanded);
  };

  var list = {
    dflt: props.labels.dflt,
    custom: props.labels.custom
  };
  var option = /*#__PURE__*/React__default['default'].createElement(FormFieldList, {
    name: "only",
    value: value,
    dflt: props.dflt,
    designDflt: props.dflt,
    onChange: update,
    label: "po-list-only",
    updateValue: update,
    list: list
  });
  if (value === 'custom') option = /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, option, /*#__PURE__*/React__default['default'].createElement(FormFieldChecks, {
    checks: props.parts,
    name: "parts",
    value: value,
    dflt: parts,
    onChange: updateCustom,
    label: "po-list-only",
    updateValue: updateCustom,
    list: list
  }));
  return /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement(OptionPreamble$1, {
    dflt: onlyDfltToggle,
    designDflt: "dflt",
    sameButDifferent: props.dflt !== props.value,
    value: value,
    desc: props.desc,
    title: props.title,
    id: "po-list-only",
    displayValue: props.labels[value],
    reset: reset,
    patternReset: patternReset,
    toggleExpanded: toggleExpanded,
    expanded: expanded,
    showHelp: function showHelp() {
      return props.raiseEvent('showHelp', {
        type: 'draftSetting',
        value: 'only'
      });
    },
    option: option,
    noDocs: props.noDocs
  }));
};

var DraftSettings = function DraftSettings(_ref) {
  var _ref$units = _ref.units,
      units = _ref$units === void 0 ? 'metric' : _ref$units,
      raiseEvent = _ref.raiseEvent,
      updateValue = _ref.updateValue,
      noDocs = _ref.noDocs,
      pattern = _ref.pattern,
      config = _ref.config,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? {
    settings: {}
  } : _ref$data;

  // State
  var _useState = React.useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1]; // Building blocks


  var noyes = [/*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
    id: "app.no"
  }), /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
    id: "app.yes"
  })];
  var hideshow = [/*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
    id: "app.hide"
  }), /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
    id: "app.show"
  })];
  var metricimperial = {
    metric: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
      id: "app.metricUnits"
    }),
    imperial: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
      id: "app.imperialUnits"
    })
  };
  var labels = {
    sa: {
      none: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: "app.noSeamAllowance"
      }),
      dflt: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: "app.standardSeamAllowance"
      }),
      custom: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: "app.customSeamAllowance"
      })
    },
    only: {
      dflt: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: "app.default"
      }),
      custom: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: "app.custom"
      })
    },
    paperless: noyes,
    advanced: hideshow,
    complete: hideshow,
    debug: noyes
  }; // Methods

  var toggleGroup = function toggleGroup(group) {
    var shown = expanded.slice(0);
    var index = shown.indexOf(group);
    if (index === -1) shown.push(group);else shown.splice(index, 1);
    setExpanded(shown);
  };

  var getDefault = function getDefault(setting) {
    var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (pattern && typeof pattern.settings[setting] !== 'undefined') return pattern.settings[setting];

    switch (setting) {
      case 'sa':
        return 10;

      case 'only':
        return 'dflt';

      case 'complete':
        return true;

      case 'margin':
        return 2;

      case 'units':
        return units;

      case 'debug':
        return false;

      default:
        return false;
    }
  };

  var addProps = function addProps(setting) {
    var childProps = {
      raiseEvent: raiseEvent,
      updateValue: updateValue,
      units: units,
      key: setting,
      name: setting,
      labels: labels[setting],
      noDocs: noDocs,
      dflt: getDefault(setting, pattern),
      designDflt: getDefault(setting)
    };
    childProps.title = /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
      id: 'settings.' + setting + '.title'
    });
    childProps.desc = /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
      id: 'settings.' + setting + '.description'
    });

    if (setting === 'only') {
      childProps.customDflt = [];
      childProps.parts = {};

      if (config.draftOrder) {
        var _iterator = _createForOfIteratorHelper(config.draftOrder),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var part = _step.value;
            childProps.parts[part] = /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
              id: 'parts.' + part
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }

    if (typeof data.settings[setting] !== 'undefined') childProps.value = data.settings[setting];else childProps.value = null;
    return childProps;
  };

  var groups = {
    advanced: [/*#__PURE__*/React__default['default'].createElement(DraftSettingLanguage$1, addProps('locale')), /*#__PURE__*/React__default['default'].createElement(DraftSettingUnits, _extends({}, addProps('units'), {
      list: metricimperial
    })), /*#__PURE__*/React__default['default'].createElement(DraftSettingComplete, addProps('complete')), /*#__PURE__*/React__default['default'].createElement(DraftSettingMargin, addProps('margin')), /*#__PURE__*/React__default['default'].createElement(DraftSettingOnly, addProps('only')), /*#__PURE__*/React__default['default'].createElement(DraftSettingDebug, addProps('debug'))]
  };
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("ul", {
    className: "config level-1 nogroups"
  }, /*#__PURE__*/React__default['default'].createElement(DraftSettingSa, addProps('sa')), /*#__PURE__*/React__default['default'].createElement(DraftSettingPaperless, addProps('paperless')), /*#__PURE__*/React__default['default'].createElement(DraftSettingAdvanced, addProps('advanced'))), data.settings.advanced && /*#__PURE__*/React__default['default'].createElement("ul", {
    className: "config level-1"
  }, Object.keys(groups).map(function (group) {
    var open = true;
    if (expanded.indexOf(group) === -1) open = false;
    var children = null;
    if (open) children = groups[group].map(function (component) {
      return component;
    });
    return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, {
      key: group
    }, /*#__PURE__*/React__default['default'].createElement("li", {
      className: open ? 'expanded' : 'collapsed',
      key: group + '-ghead'
    }, /*#__PURE__*/React__default['default'].createElement("span", {
      onClick: function onClick() {
        return toggleGroup(group);
      }
    }, /*#__PURE__*/React__default['default'].createElement(RightIcon__default['default'], {
      className: 'icon-col-exp ' + (open ? 'expanded' : 'collapsed')
    }), /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
      id: 'optiongroups.' + group
    }))), children);
  })));
};

var DraftConfigurator = function DraftConfigurator(_ref) {
  var _ref$noDocs = _ref.noDocs,
      noDocs = _ref$noDocs === void 0 ? false : _ref$noDocs,
      _ref$units = _ref.units,
      units = _ref$units === void 0 ? 'metric' : _ref$units,
      _ref$config = _ref.config,
      config = _ref$config === void 0 ? {} : _ref$config,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data,
      pattern = _ref.pattern,
      updatePatternData = _ref.updatePatternData,
      raiseEvent = _ref.raiseEvent,
      _ref$actions = _ref.actions,
      actions = _ref$actions === void 0 ? false : _ref$actions;
  var childProps = {
    noDocs: noDocs,
    units: units,
    config: config,
    data: data,
    pattern: pattern,
    raiseEvent: raiseEvent
  };
  return /*#__PURE__*/React__default['default'].createElement("ul", {
    id: "draft-config"
  }, actions && /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement("span", null, /*#__PURE__*/React__default['default'].createElement(PlayIcon__default['default'], null), /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
    id: "app.actions"
  })), /*#__PURE__*/React__default['default'].createElement("ul", {
    className: "config level-1"
  }, actions)), /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement("span", null, /*#__PURE__*/React__default['default'].createElement(TuneIcon__default['default'], null), /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
    id: "app.designOptions"
  })), /*#__PURE__*/React__default['default'].createElement(PatternOptions, _extends({}, childProps, {
    updateValue: function updateValue(name, value) {
      return updatePatternData(value, 'settings', 'options', name);
    }
  }))), /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement("span", null, /*#__PURE__*/React__default['default'].createElement(WrenchIcon__default['default'], null), /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
    id: "app.patternOptions"
  })), /*#__PURE__*/React__default['default'].createElement(DraftSettings, _extends({}, childProps, {
    updateValue: function updateValue(name, value) {
      return updatePatternData(value, 'settings', name);
    }
  }))));
};

module.exports = DraftConfigurator;
//# sourceMappingURL=index.js.map
