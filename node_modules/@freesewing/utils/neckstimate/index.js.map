{"version":3,"file":"index.js","sources":["../src/neckstimate/complete.js","../src/neckstimate/with-breasts.js","../src/neckstimate/without-breasts.js","../src/neckstimate/ratio.js","../src/neckstimate/index.js"],"sourcesContent":["// The completes the list of measurements with the ones\n// we can calculate based on what we already have\nexport default function complete(m) {\n  // Added by plugin-bust:\n  m.bust = m.chest\n\n  // Added by plugin-measurements:\n  m.crossSeamBack = m.crossSeam - m.crossSeamFront\n  m.seatBackArc = m.seatBack / 2\n  m.waistBackArc = m.waistBack / 2\n  if (m.bust && m.bustFront) m.bustBack = m.bust - m.bustFront\n  m.seatFront = m.seat - m.seatBack\n  m.seatFrontArc = m.seatFront / 2\n  m.waistFront = m.waist - m.waistBack\n  m.waistFrontArc = m.waistFront / 2\n  if (m.hightBust && m.highBustFront) m.highBustBack = m.highBust - m.highBustFront\n\n  return m\n}\n","import complete from './complete'\n\n/*\n * These are a set of measurements of an average-sized woman.\n * We simply extrapolate for other sizes (based on neck)\n * by keeping the same proportions.\n * That is almost certainly not the best sizing table you can get,\n * but we are not in the business of standard sizes, so this will do.\n */\n\nexport default complete({\n  ankle: 245,\n  biceps: 270,\n  bustFront: 480,\n  bustSpan: 160,\n  chest: 925,\n  crossSeam: 740,\n  crossSeamFront: 370,\n  crotchDepth: 270,\n  heel: 315,\n  head: 565,\n  highBust: 865,\n  highBustFront: 440,\n  hips: 900,\n  hpsToBust: 275,\n  hpsToWaistBack: 395,\n  hpsToWaistFront: 400,\n  inseam: 765,\n  knee: 380,\n  neck: 340,\n  seat: 1010,\n  seatBack: 520,\n  shoulderSlope: 13,\n  shoulderToElbow: 340,\n  shoulderToShoulder: 415,\n  shoulderToWrist: 590,\n  underbust: 780,\n  upperLeg: 570,\n  waist: 750,\n  waistBack: 380,\n  waistToFloor: 1050,\n  waistToHips: 125,\n  waistToKnee: 600,\n  waistToSeat: 250,\n  waistToUnderbust: 80,\n  waistToUpperLeg: 285,\n  wrist: 165\n})\n","import complete from './complete'\n\n/*\n * These are a set of measurements of an average-sized man.\n * We simply extrapolate for other sizes (based on neck)\n * by keeping the same proportions.\n * That is almost certainly not the best sizing table you can get,\n * but we are not in the business of standard sizes, so this will do.\n */\nexport default complete({\n  ankle: 235,\n  biceps: 350,\n  chest: 1000,\n  crossSeam: 870,\n  crossSeamFront: 410,\n  crotchDepth: 340,\n  heel: 360,\n  head: 590,\n  hips: 840,\n  hpsToBust: 280,\n  hpsToWaistBack: 470,\n  inseam: 780,\n  knee: 410,\n  neck: 380,\n  seat: 1020,\n  seatBack: 560,\n  shoulderSlope: 13,\n  shoulderToElbow: 360,\n  shoulderToShoulder: 450,\n  shoulderToWrist: 630,\n  upperLeg: 625,\n  waist: 810,\n  waistBack: 410,\n  waistToFloor: 1160,\n  waistToHips: 130,\n  waistToKnee: 640,\n  waistToSeat: 270,\n  waistToUpperLeg: 340,\n  wrist: 175\n})\n","/*\n * Since linear measurements don't scale the same as circumference\n * measurements, we apply a correction ratio.\n */\n\nlet a = 0.5 // arc\nlet c = 1 // circumference\nlet v = 0.65 // vertical\n\nexport default {\n  // Arc measurements\n  bustFront: a,\n  bustSpan: a,\n  highBustFront: a,\n  // Circumference measurements\n  ankle: c,\n  biceps: c,\n  chest: c,\n  highBust: c,\n  hips: c,\n  neck: c,\n  underbust: c,\n  // Vertical measurements\n  crotchDepth: v,\n  hpsToBust: v,\n  hpsToWaistBack: v,\n  hpsToWaistFront: v,\n  waistToHips: v,\n  waistToKnee: v,\n  waistToSeat: v,\n  waistToUnderbust: v,\n  waistToUpperLeg: v,\n  // Other\n  seatBack: 0.6,\n  waistBack: 0.85,\n  crossSeam: 0.6,\n  crossSeamFront: 0.3,\n  head: 0.35,\n  heel: 0.25,\n  inseam: 0.25,\n  knee: 0.65,\n  seat: 0.6,\n  shoulderToElbow: 0.5,\n  shoulderToShoulder: 0.65,\n  shoulderToWrist: 0.3,\n  upperLeg: 0.45,\n  waist: 0.85,\n  waistToFloor: 0.4,\n  wrist: 0.5\n}\n","import withBreasts from './with-breasts'\nimport withoutBreasts from './without-breasts'\nimport ratio from './ratio'\n\n// This estimates a measurement based on the neck\nconst neckstimate = (neck = false, measurement = false, breasts = false, noRound=false) => {\n  let data = breasts ? withBreasts : withoutBreasts\n\n  // Shoulder slope is in degrees now. Always return de default.\n  if (measurement === 'shoulderSlope') return withBreasts.shoulderSlope\n\n  if (!neck) throw new Error('neckstimate() requires a neck measurement in mm as first parameter')\n  if (!measurement) {\n    // No measurement passed\n    throw new Error(\n      'new neckstimate() requires a valid measurement name as second parameter. (received ' +\n        JSON.stringify(measurement) +\n        ')'\n    )\n  }\n  if (typeof data[measurement] === 'undefined') {\n    if (typeof withBreasts[measurement] === 'undefined') {\n      // We used to throw this error, but let's just return null instead so things don't go off the rails\n      console.log(\n        new Error(`neckstimate() called with an invalid measurement name (${measurement})`)\n      )\n      return null\n    } else {\n      console.log(\n        `WARNING: neckstimate() called for a breasts-only measurement (${measurement}) on a no-breasts person`\n      )\n      // Return something anyway, rather than fall over\n      data = withBreasts\n    }\n  }\n\n  // This is what should happen\n  let delta = (neck / data.neck) * data[measurement] - data[measurement]\n\n  return noRound\n    ? data[measurement] + delta * ratio[measurement]\n    : Math.round(data[measurement] + delta * ratio[measurement])\n}\n\nexport default neckstimate\n"],"names":["complete","m","bust","chest","crossSeamBack","crossSeam","crossSeamFront","seatBackArc","seatBack","waistBackArc","waistBack","bustFront","bustBack","seatFront","seat","seatFrontArc","waistFront","waist","waistFrontArc","hightBust","highBustFront","highBustBack","highBust","ankle","biceps","bustSpan","crotchDepth","heel","head","hips","hpsToBust","hpsToWaistBack","hpsToWaistFront","inseam","knee","neck","shoulderSlope","shoulderToElbow","shoulderToShoulder","shoulderToWrist","underbust","upperLeg","waistToFloor","waistToHips","waistToKnee","waistToSeat","waistToUnderbust","waistToUpperLeg","wrist","a","c","v","neckstimate","measurement","breasts","noRound","data","withBreasts","withoutBreasts","Error","JSON","stringify","console","log","delta","ratio","Math","round"],"mappings":"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"}